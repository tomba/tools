#!/bin/bash

# git-compile-range "ninja -C build" <git-rev-range>
# git-compile-range "kconfig && kmake" <git-rev-range>
# git compile-range "(kconfig && kmake drivers/media/) > /dev/null" ec0f247555d9..

OPTSTRING=":w"

while getopts ${OPTSTRING} opt; do
	case ${opt} in
		w)
			USE_WORKTREE=1
			;;
		?)
			echo "Invalid option: -${OPTARG}."
			exit 1
			;;
	esac
done

shift $((OPTIND-1))

BUILD=$1
RANGE=$2

usage()
{
	echo "Usage: git-compile-range <build-command> <git-rev-range>"
	echo "Examples:"
	echo '    git-compile-range "ninja -C build" <git-rev-range>'
	echo '    git-compile-range "kconfig && kmake" <git-rev-range>'
	echo '    git compile-range "(kconfig && kmake drivers/media/) > /dev/null" ec0f247555d9..'
	exit 1
}

if [ -z "$BUILD" -o -z "$RANGE" ]; then
	usage
fi

set -e

OLD_BRANCH=`git name-rev --name-only HEAD`

COMMITS=$(git rev-list --reverse $RANGE)

NUM_COMMITS=$(echo "$COMMITS" | wc -l)

if [ $NUM_COMMITS -gt 200 ]; then
	echo WARNING: excessive amount of commits: $NUM_COMMITS
	exit 1
fi

echo BUILD=${BUILD} RANGE=${RANGE} NUM_COMMITS=${NUM_COMMITS}

if [ -v USE_WORKTREE ]; then
	WORK_DIR=auto-make
	echo Creating worktree at ${WORK_DIR}
	git worktree add --detach ${WORK_DIR}
else
	WORK_DIR=./
	echo Checkout detached HEAD
	git checkout --detach
fi

cleanup()
{
	rv=$?

	if [ -v USE_WORKTREE ]; then
		echo Removing worktree at ${WORK_DIR}
		git worktree remove -f ${WORK_DIR}
	else
		echo Restoring branch to $OLD_BRANCH
		git checkout ${OLD_BRANCH}
	fi

	if [ $rv -eq 0 ]; then
		echo Build **OK**
	else
		echo Build **FAILED**
	fi
}
trap cleanup EXIT

cleanup_err()
{
	echo "**ERROR**"
}
trap cleanup_err ERR

cleanup_int()
{
	echo "**INTERRUPT**"
}
trap cleanup_int INT

for id in $COMMITS; do
	git -C ${WORK_DIR} --no-pager log --oneline -1 $id
	git -C ${WORK_DIR} reset -q --hard $id
	bash -c "cd ${WORK_DIR}; $BUILD"
done
